{
	"info": {
		"_postman_id": "e3d8537e-8f7c-4e7d-8d06-f2e916825eb0",
		"name": "RenastechC8-API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18869877",
		"_collection_link": "https://bold-robot-423917.postman.co/workspace/RenastechC8~1b4ffab3-091d-44c2-b111-5a7ad710fe3c/collection/18869877-e3d8537e-8f7c-4e7d-8d06-f2e916825eb0?action=share&creator=18869877&source=collection_link"
	},
	"item": [
		{
			"name": "Status",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//This is used before making the call\r",
							"console.log(\"Call will be made now\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"Call is successfully made\");\r",
							"//This is used after making the call\r",
							"//My status code is 200\r",
							"//\"status\" is \"OK\" in response\r",
							"\r",
							"//Check status code\r",
							"pm.test (\"Status code is 200\", function(){\r",
							"pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response should contain OK\", function(){\r",
							"pm.expect(pm.response.text()).to.include(\"OK\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://simple-books-api.glitch.me/status",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"glitch",
						"me"
					],
					"path": [
						"status"
					]
				}
			},
			"response": []
		},
		{
			"name": "List of Books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Check status code\r",
							"pm.test (\"Status code is 200\", function(){\r",
							"pm.response.to.have.status(200);\r",
							"// Actual=200 , Expected= 200\r",
							"});\r",
							"\r",
							"//Lets save Api Response\r",
							"const response=pm.response.json();\r",
							"\r",
							"const firstBookId=response[0].id;\r",
							"const firstBookName=response[0].name;\r",
							"\r",
							"console.log('firstBookId:'+firstBookId+'firstBookName:'+firstBookName);\r",
							"console.log(response);\r",
							"\r",
							"pm.collectionVariables.set(\"firstBookId\",firstBookId);\r",
							"pm.collectionVariables.set(\"firstBookName\",firstBookName);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://simple-books-api.glitch.me/books",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"glitch",
						"me"
					],
					"path": [
						"books"
					],
					"query": [
						{
							"key": "available",
							"value": "false",
							"disabled": true
						},
						{
							"key": "limit",
							"value": "5",
							"disabled": true
						},
						{
							"key": "type",
							"value": "fiction",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Retrieve Single Book Information",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Check status code\r",
							"pm.test (\"Status code is 200\", function(){\r",
							"pm.response.to.have.status(200);\r",
							"// Actual=200 , Expected= 200\r",
							"});\r",
							"\r",
							"//LEts save the response\r",
							"const response=pm.response.json();\r",
							"\r",
							"//Lets save expected value\r",
							"const expectedFirstBookName=pm.variables.get('firstBookName');\r",
							"\r",
							"const actualFirstBookName=response.name;\r",
							"\r",
							"\r",
							"pm.test(\"Verify Book Name\", function (){\r",
							"pm.expect(actualFirstBookName).to.eql(expectedFirstBookName);\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/books/{{firstBookId}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"books",
						"{{firstBookId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Security Pass",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test (\"Status code is 201\", function(){\r",
							"pm.response.to.have.status(201);\r",
							"// Actual=200 , Expected= 200\r",
							"});\r",
							"\r",
							"//Save acces token as a collection variable\r",
							"\r",
							"const response=pm.response.json();\r",
							"\r",
							"const accessToken=response.accessToken;\r",
							"\r",
							"pm.collectionVariables.set('accessToken',accessToken);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"clientName\":\"{{$randomFullName}}\",\r\n    \"clientEmail\":\"{{$randomEmail}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/api-clients",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api-clients"
					]
				}
			},
			"response": []
		},
		{
			"name": "Security Pass #Negative Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test (\"Status code is 409\", function(){\r",
							"pm.response.to.have.status(409);\r",
							"// Actual=200 , Expected= 200\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"clientName\":\"{{$randomFullName}}\",\r\n    \"clientEmail\":\"failedTestCase@renastech.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/api-clients",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api-clients"
					]
				}
			},
			"response": []
		},
		{
			"name": "Order a Book (If Book is Available)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set('randomNum', _.random(1,6));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test (\"Status code is 201\", function(){\r",
							"pm.response.to.have.status(201);\r",
							"// Actual=200 , Expected= 200\r",
							"});\r",
							"\r",
							"const response=pm.response.json();\r",
							"const actualCreatedValue=response.created;\r",
							"const expectedCreatedValue=true;\r",
							"\r",
							"pm.test('Validate if created is true', function (){\r",
							"pm.expect(expectedCreatedValue).to.equal(actualCreatedValue);\r",
							"});\r",
							"\r",
							"const orderId=response.orderId;\r",
							"pm.collectionVariables.set(\"orderId\",orderId);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"bookId\":{{randomNum}},\r\n    \"customerName\":\"{{$randomFullName}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Order a Book (If Book is not Available)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test (\"Status code is 404\", function(){\r",
							"pm.response.to.have.status(404);\r",
							"// Actual=200 , Expected= 200\r",
							"});\r",
							"\r",
							"//Validate Erro message\r",
							"const response=pm.response.json();\r",
							"const actualMessage=response.error; //This book is not in stock. Try again later.\r",
							"const expectedMessage=\"This book is not in stock. Try again later.\";\r",
							"\r",
							"\r",
							"pm.test('Validate Error Message', function (){\r",
							"pm.expect(actualMessage).to.equal(expectedMessage);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"bookId\":2,\r\n    \"customerName\":\"{{$randomFullName}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "List of Orders (if no auth)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test (\"Status code is 401\", function(){\r",
							"pm.response.to.have.status(401);\r",
							"// Actual=401 , Expected= 401\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "List of Orders",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test (\"Status code is 200\", function(){\r",
							"pm.response.to.have.status(200);\r",
							"// Actual=200 , Expected= 200\r",
							"});\r",
							"\r",
							"const response=pm.response.json();\r",
							"\r",
							"//const expectedCreatedBy=\"8aa22b44ee28de064150bf99cf57d99a05a7e2178485c3ba1d320e0ff56f0efe\";\r",
							"const expectedCreatedBy=pm.variables.get('accessToken');\r",
							"const actualCreatedBy=response[0].createdBy;\r",
							"\r",
							"pm.test('Validate if createdBy is present in respnse', function(){\r",
							"pm.expect(expectedCreatedBy).to.equal(actualCreatedBy);\r",
							"\r",
							"});\r",
							"const expectedOrderId=pm.variables.get('orderId');\r",
							"for (let i=0; i<response.length; i++){\r",
							"\r",
							"    const actualOrderId=response[i].id;\r",
							"    if(expectedOrderId===actualOrderId){\r",
							"        pm.test('Validate if order Id is present in respnse', function(){\r",
							"            pm.expect(expectedOrderId).to.eql(actualOrderId);\r",
							"        });\r",
							"    }\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Retrieve One Order #Negative Scenario",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test (\"Status code is 404\", function(){\r",
							"pm.response.to.have.status(404);\r",
							"// Actual=200 , Expected= 200\r",
							"});\r",
							"\r",
							"const response=pm.response.json();\r",
							"const actualMessage=response.error;\r",
							"const expectedMessage=\"No order with id 123456sfdf.\";\r",
							"\r",
							"pm.test('Validate if error is present in response', function(){\r",
							"    pm.expect(expectedMessage).to.eql(actualMessage);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/orders/:bookId",
					"host": [
						"{{URL}}"
					],
					"path": [
						"orders",
						":bookId"
					],
					"variable": [
						{
							"key": "bookId",
							"value": "123456sfdf"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Retrieve One Order Id #Happy path 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test (\"Status code is 200\", function(){\r",
							"pm.response.to.have.status(200);\r",
							"// Actual=200 , Expected= 200\r",
							"});\r",
							"\r",
							"const response=pm.response.json();\r",
							"const actualQuantity=response.quantity;\r",
							"const expectedQuantity= 1;\r",
							"\r",
							"pm.test('Verify that Quantity is 1 in the response', function(){\r",
							"    pm.expect(actualQuantity).to.equal(expectedQuantity);\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/orders/-vZJayY87VFkiKXukC1gV",
					"host": [
						"{{URL}}"
					],
					"path": [
						"orders",
						"-vZJayY87VFkiKXukC1gV"
					]
				}
			},
			"response": []
		},
		{
			"name": "Retrieve One Order Id #Happy Path 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Response time is less than 400ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/orders/:bookId",
					"host": [
						"{{URL}}"
					],
					"path": [
						"orders",
						":bookId"
					],
					"variable": [
						{
							"key": "bookId",
							"value": "{{orderId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Order Partially - CustomerName",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"customerName\":\"Mansur\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/orders/:bookId",
					"host": [
						"{{URL}}"
					],
					"path": [
						"orders",
						":bookId"
					],
					"variable": [
						{
							"key": "bookId",
							"value": "{{orderId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "List of Orders - Check For Updated Name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test (\"Status code is 200\", function(){\r",
							"pm.response.to.have.status(200);\r",
							"// Actual=200 , Expected= 200\r",
							"});\r",
							"\r",
							"const response=pm.response.json();\r",
							"\r",
							"//const expectedCreatedBy=\"8aa22b44ee28de064150bf99cf57d99a05a7e2178485c3ba1d320e0ff56f0efe\";\r",
							"const expectedCreatedBy=pm.variables.get('accessToken');\r",
							"const actualCreatedBy=response[0].createdBy;\r",
							"\r",
							"pm.test('Validate if createdBy is present in respnse', function(){\r",
							"pm.expect(expectedCreatedBy).to.equal(actualCreatedBy);\r",
							"\r",
							"});\r",
							"const expectedOrderId=pm.variables.get('orderId');\r",
							"for (let i=0; i<response.length; i++){\r",
							"\r",
							"    const actualOrderId=response[i].id;\r",
							"    if(expectedOrderId===actualOrderId){\r",
							"        pm.test('Validate if order Id is present in respnse', function(){\r",
							"            pm.expect(expectedOrderId).to.eql(actualOrderId);\r",
							"        });\r",
							"    }\r",
							"}\r",
							"\r",
							"pm.test(\"Check if Order is updated\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[4].customerName).to.eql(\"Mansur\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/orders",
					"host": [
						"{{URL}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Order Partially - BookId",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"bookId\":2\r\n}\r\n//It doesnt book ID\r\n//It removes customer when we make this call\r\n//>>> create bug ticket >>>>",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/orders/HJx-OSKxehhUn39UVWklh",
					"host": [
						"{{URL}}"
					],
					"path": [
						"orders",
						"HJx-OSKxehhUn39UVWklh"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Order - Whole Order",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"bookId\":3,\r\n    \"customerName\":\"Sherry\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/orders/:orderId",
					"host": [
						"{{URL}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{orderId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete an Order",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{URL}}/orders/:orderId",
					"host": [
						"{{URL}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{orderId}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "firstBookId",
			"value": ""
		},
		{
			"key": "firstBookName",
			"value": ""
		},
		{
			"key": "URL",
			"value": "",
			"type": "string"
		},
		{
			"key": "accessToken",
			"value": ""
		},
		{
			"key": "randomNum",
			"value": ""
		},
		{
			"key": "orderId",
			"value": ""
		}
	]
}